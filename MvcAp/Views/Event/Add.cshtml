@using System.Configuration
@model Event
@{
    ViewBag.MapPath = "Activity Setting";
    bool hasDefaule = false;
    if (Model != null)
    {
        hasDefaule = true;
    }
    string activityURL = "";
    bool blockEdit = false;
    if (hasDefaule)
    {
        activityURL = ConfigurationManager.AppSettings["PublicSiteUrl"] + "Announce/View?" + Model.Code;
        if (Model.EventRegist!=null)
        {
            if (Model.EventRegist.Count>0)
            {
                blockEdit = true;
            }
        }

    }
}
@section Heads{
    <link rel="stylesheet" href="/assets/css/bootstrap-multiselect.min.css" />
    <link rel="stylesheet" href="/assets/font-awesome/4.2.0/css/font-awesome.min.css" />
    <link href="~/Content/jquery.datetimepicker.css" rel="stylesheet" />
    <link href="~/Content/waitMe.min.css" rel="stylesheet" />
}
<div class="loading">
    <p>
        <img src="~/images/pageLoading.gif" />
        Please Wait
    </p>
</div>
<div id="pageContent" class="page-content hide">
    <div class="page-header">
        <h1>
            @(Model != null && Model.ID > 0 ? "Edit" : "Create")
        </h1>
    </div>
    <div class="row containerBlock">
        <div class="col-xs-12 col-md-6">
            <form id="main-form" role="form" class="form-horizontal" method="post">
                <div class="form-group">
                    <label class="col-sm-3 no-padding-right"><span class="red">*</span>Activity Name</label>
                    <div class="col-sm-9">
                        @Html.TextBoxFor(model => model.Name, htmlAttributes: new { @class = "col-xs-10 col-sm-8 required" })
                        <span class="help-inline text-danger col-xs-12 col-sm-7">
                            @Html.ValidationMessageFor(model => model.Name)
                        </span>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-10">
                        <div class="error"></div>
                        <input hidden id="DepId" value="@ViewBag.depId" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 no-padding-right"><span class="red">*</span> Activity Start</label>
                    <div class="col-sm-9">
                        <input type="text" id="EventStart" value="@(Model != null ? ((DateTime)Model.EventStart).ToString("yyyy/MM/dd HH:00") : "")" class="col-xs-10 col-sm-8 event_date required">
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 no-padding-right"><span class="red">*</span> Activity End</label>
                    <div class="col-sm-9">
                        <input type="text" id="EventEnd" value="@(Model != null ? ((DateTime)Model.EventEnd).ToString("yyyy/MM/dd HH:00") : "")" class="col-xs-10 col-sm-8 event_date required">
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 no-padding-right"><span class="red">*</span> Enroll Start</label>
                    <div class="col-sm-9">
                        <input type="text" id="SignStart" value="@(Model != null ? ((DateTime) Model.SignStart).ToString("yyyy/MM/dd HH:00") : "")" class="col-xs-10 col-sm-8 event_date required">
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 no-padding-right"><span class="red">*</span> Enroll End</label>
                    <div class="col-sm-9">
                        <input type="text" id="SignEnd" value="@(Model != null ? ((DateTime)Model.SignEnd).ToString("yyyy/MM/dd HH:00") : "")" class="col-xs-10 col-sm-8 event_date required">
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 no-padding-right">Contact Email</label>
                    <div class="col-sm-9">
                        <input id="MasterEmail" name="MasterEmail" type="text" value="@(Model!=null ? Model.MasterEmail: "")" class="col-xs-10 col-sm-8 required">
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 no-padding-right">Address</label>
                    <div class="col-sm-9">
                        <input id="Address" name="Address" type="text" value="@(Model!=null ? Model.Address: "")" class="col-xs-10 col-sm-8 required">
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 no-padding-right">Require Password</label>
                    <div class="col-sm-9">
                        <label>
                            @{
                                string isPwStr = Model != null && Model.IsPwLimited ? "checked" : "";
                                string isPwVal = Model != null && Model.IsPwLimited ? "true" : "false";
                            }
                            <input name="IsPwLimited" id="IsPwLimited" class="ace ace-switch ace-switch-7" type="checkbox" @(isPwStr) value="@isPwVal">
                            <span class="lbl swEnable" name="switch-IsEnable"></span>
                        </label>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 no-padding-right">Application Password</label>
                    <div class="col-sm-9">
                        <input id="LimitedPw" name="LimitedPw" type="text" value="@(Model!=null ? Model.LimitedPw: "")" class="col-xs-10 col-sm-8">
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 no-padding-right">Number Limited</label>
                    <div class="col-sm-9">
                        <label>
                            @{
                                string isNumStr = Model != null && Model.IsNumLimited ? "checked" : "";
                                string isNumVal = Model != null && Model.IsNumLimited ? "true" : "false";
                            }
                            <input name="IsNumLimited" id="IsNumLimited" class="ace ace-switch ace-switch-7" type="checkbox" @(isNumStr) value="@isNumVal">
                            <span class="lbl swEnable" name="switch-IsEnable"></span>
                        </label>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 no-padding-right">Max Application Number</label>
                    <div class="col-sm-9">
                        <input id="LimitedNum" name="LimitedNum" type="text" value="@(Model!=null ? Model.LimitedNum.ToString(): "")" class="col-xs-10 col-sm-8">
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 no-padding-right">Publish</label>
                    <div class="col-sm-9">
                        <label>
                            @{
                                string isOpenStr = Model != null && Model.IsOpen ? "checked" : "";
                                string isOpenVal = Model != null && Model.IsOpen ? "true" : "false";
                            }
                            <input name="IsOpen" id="IsOpen" class="ace ace-switch ace-switch-7" type="checkbox" @(isOpenStr) value="@isOpenVal">
                            <span class="lbl swEnable" name="switch-IsEnable"></span>
                        </label>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 no-padding-right"><span class="red">*</span> Person Responsible</label>
                    <div class="col-sm-9">
                        <select class="" id="UserCharge" name="UserCharge" class="col-xs-10 col-sm-8 required">
                            @foreach (var item in ViewBag.availableUsers)
                            {
                                bool isSelected = false;
                                if (Model != null && Model.UserId > 0)
                                {
                                    if (Model.UserId == item.ID)
                                    {
                                        isSelected = true;
                                    }
                                }
                                string setOn = isSelected ? "selected" : "";
                                <option value="@(item.ID)" @(setOn)>@item.Account</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 no-padding-right">QRCode Generate</label>
                    <div class="col-sm-9">
                        @{
                            string[] IsSelected = new string[3];
                            if (hasDefaule)
                            {
                                for (int i = 0; i < 3; i++)
                                {
                                    if (Model.QRcodeMode == i)
                                    {
                                        IsSelected[i] = "selected";
                                    }
                                    else
                                    {
                                        IsSelected[i] = "";
                                    }
                                }
                            }
                        }
                        <select class="" id="QRcodeMode" name="QRcodeMode" class="col-xs-10 col-sm-8 required">
                            <option value="0" @IsSelected[0]>NO</option>
                            @*<option value="1" @IsSelected[1]>Generate After Sign in</option>*@
                            <option value="2" @IsSelected[2]>YES</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 no-padding-right">QRcode Attend Password</label>
                    <div class="col-sm-9">
                        <input id="QRCodePassword" name="QRCodePassword" type="text" value="@(Model!=null ? Model.QRCodePassword: "")" class="col-xs-10 col-sm-8">
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 no-padding-right">Web Site</label>
                    <div class="col-sm-9">
                        @if (Model != null && !String.IsNullOrEmpty(Model.Code))
                        {
                            @Html.ActionLink(Model.Title, "View", "Announce", new { eventCode = Model.Code }, htmlAttributes: new { @target = "_blank", @id="EventHref" })
                        }
                        <div id="qrcode"></div>
                    </div>
                </div>
            </form>
        </div>
    <div class="col-xs-12 col-md-6 widget-container-col">
        <div class="widget-box collapsed">
            <div class="widget-header">
                <h5 class="widget-title"><span class="red">*</span> Activity Introduction</h5>
                <div class="widget-toolbar">
                    <a href="#" data-action="collapse">
                        <i class="ace-icon fa fa-chevron-up"></i>
                    </a>
                </div>
            </div>
            <div class="widget-body">
                <div class="widget-main">
                    <script id="container" name="content" type="text/plain" style="width: 100%; height: 500px;">
                            @(Model != null ? Html.Raw(Model.Content) : Html.Raw(""))
                        </script>
                </div>
            </div>
        </div>
    </div>        
        <div class="col-xs-12 col-md-6 widget-container-col">
            <div class="widget-box collapsed">
                <div class="widget-header">
                    <a href="#my-modal" role="button" class="bigger-125 pos-abs" data-toggle="modal">
                        <h5 class="widget-title">Email Content After Receiving Application</h5>
                    </a>                    
                    <div class="widget-toolbar">
                        <a href="#" data-action="collapse">
                            <i class="ace-icon fa fa-chevron-up"></i>
                        </a>
                    </div>
                </div>
                <div class="widget-body">
                    <div class="widget-main">
                        <script id="autoMailContainer" name="content" type="text/plain" style="width: 100%; height: 500px;">
                            @(Model != null ? Html.Raw(Model.EmailContent) : Html.Raw(""))
                        </script>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xs-12 col-md-6 widget-container-col">
            <div class="widget-box collapsed">
                <div class="widget-header">
                    <a href="#my-modal" role="button" class="bigger-125 pos-abs" data-toggle="modal">
                        <h5 class="widget-title">Email Content After Enrollment</h5>
                    </a>                       
                    <div class="widget-toolbar">
                        <a href="#" data-action="collapse">
                            <i class="ace-icon fa fa-chevron-up"></i>
                        </a>
                    </div>
                </div>
                <div class="widget-body">
                    <div class="widget-main">
                        <script id="regMailContainer" name="content" type="text/plain" style="width: 100%; height: 500px;">
                            @(Model != null ? Html.Raw(Model.CfmEmailContent) : Html.Raw(""))
                        </script>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xs-12 col-md-6 widget-container-col">
            <div class="widget-box collapsed">
                <div class="widget-header">
                    <h5 class="widget-title"><span class="red">*</span> Agreement Content</h5>
                    <button id="btn_LoadAgree" class="btn btn-yellow btn-sm ml-md">Load Default Agreement</button>
                    <div class="widget-toolbar">
                        <a href="#" data-action="collapse">
                            <i class="ace-icon fa fa-chevron-up"></i>
                        </a>
                    </div>
                </div>
                <div class="widget-body">
                    <div class="widget-main">
                        <script id="agreeContainer" name="content" type="text/plain" style="width: 100%; height: 500px;">
                            @{
                                string agreement = "";
                                if (hasDefaule && !string.IsNullOrEmpty(Model.Agreement))
                                {
                                    agreement = Model.Agreement;
                                }
                                else
                                {
                                    agreement = ViewBag.defaultAgreement;
                                }
                            }
                            @(Html.Raw(agreement))

                        </script>
                    </div>
                </div>
            </div>
        </div>
        <div id="my-modal" class="modal fade" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                        <h3 class="smaller lighter blue no-margin">Email Column Template</h3>
                    </div>

                    <div class="modal-body">
                        <p><span style='color: rgb(227, 108, 9);'>Event Name : {thisname}</span></p> <p><span style='color: rgb(227, 108, 9);'>Address : {address}</span> </p> <p><span style='color: rgb(227, 108, 9);'>Check-in # : {checkin}</span> </p>
                    </div>

                    <div class="modal-footer">
                        <button class="btn btn-sm btn-danger pull-right" data-dismiss="modal">
                            <i class="ace-icon fa fa-times"></i>
                            Close
                        </button>
                    </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div>
        <div class="col-xs-12">
            <div class="clearfix form-actions">
                <div class="text-center">
                    @Html.HiddenFor(model => model.ID)
                    <a class="btn btn-info" id="send">
                        Save
                    </a>
                    &nbsp;
                    <a class="btn" id="modal-btn-cancel" href="@Url.Action("Index")">
                        Leave
                    </a>
                </div>
            </div>
        </div>
        <div id="ESdiv" class="col-xs-12  widget-container-col hidden">
            <div class="widget-box collapsed">
                <div class="widget-header">
                    <h5 class="widget-title">Application Form</h5>
                    <div class="widget-toolbar">
                        <a href="#" data-action="collapse">
                            <i class="ace-icon fa fa-chevron-up"></i>
                        </a>
                    </div>
                </div>
                <div class="widget-body">
                    <div class="widget-main">
                        <table id="Sign-table" class="dataTable table table-striped table-bordered table-hover">
                            <thead>
                                <tr>
                                    <th class="col-md-3">Column Name</th>
                                    <th class="col-md-2">Type</th>
                                    <th>Min Length</th>
                                    <th>Max Length</th>
                                    <th class="col-md-1">Required</th>
                                    <th class="col-md-1">Style</th>
                                    <th class="col-md-2">Action</th>
                                </tr>
                            </thead>
                            <tbody name="Sign-tbbody">
                                @if (Model != null)
                                {
                                    foreach (EventSign et in Model.EventSign)
                                    {
                                <tr name="Sign-tr[@(et.ID)]">
                                    <td>
                                        @Html.TextBox("EStitle[" + et.ID + "]", et.Title)
                                    </td>
                                    <td>
                                        <select name="EStypeId[@(et.ID)]">

                                            @foreach (var item in ViewBag.colTypeList)
                                                    {
                                                        if (item.ID == et.TypeId)
                                                        {
                                                    <option value="@(item.ID)" selected="selected">@item.TypeName</option>
                                                        }
                                                        else
                                                        {
                                                    <option value="@(item.ID)">@item.TypeName</option>
                                                        }
                                                    }
                                        </select>
                                        <div name="ESTag[@(et.ID)]" class="col-sm-9">
                                            <div class="inline">
                                                @if (et.EventDropList.Count() > 0)
                                                        {
                                                        <input type="text" name="TagField[@(et.ID)]" id="TagField[@(et.ID)]" data-role="tagsinput"
                                                               value="@foreach (var opt in et.EventDropList) { @(opt.RowValue + ",")      } " placeholder="Enter options ..." />

                                                        }
                                                        else
                                                        {
                                                        <input type="text" name="TagField[@(et.ID)]" id="TagField[@(et.ID)]" data-role="tagsinput"
                                                               value="" placeholder="Enter options ..." />
                                                        }
                                            </div>
                                        </div>
                                    </td>

                                    <td>
                                        @Html.TextBox("ESminLen[" + et.ID + "]", et.MinLen, new { @class = "col-xs-5" })
                                    </td>
                                    <td>
                                        @Html.TextBox("ESmaxLen[" + et.ID + "]", et.MaxLen, new { @class = "col-xs-5" })
                                    </td>
                                    <td>
                                        @{
                                                    string isEnableStr = (bool)et.IsRequired ? "checked" : "";
                                                    string isEnableVal = (bool)et.IsRequired ? "true" : "false";
                                        }
                                        <input name="ESisrequired[@et.ID]" id="ESisrequired_@et.ID" type="checkbox" @(isEnableStr) value="@isEnableVal" disabled="@blockEdit">
                                    </td>
                                    <td id="EScolType[@et.ID]">
                                        @{
                                                    string isVerticle = et.UseType == 0 ? "fa-arrows-h" : "fa-arrows-v";
                                        }
                                        <a name="ESuseType[@et.ID]" class="btn btn-sm btn-purple">
                                            <i class="fa @isVerticle bigger-120"></i>
                                            <input hidden="true" id="ESuseType[@et.ID]" value="@et.UseType" />
                                        </a>
                                    </td>
                                    <td>
                                        <button id="ESupdate[@et.ID]" class="btn btn-sm btn-info" disabled="@blockEdit">
                                            <i class="ace-icon fa fa-check bigger-120"></i>
                                        </button>
                                        <button id="ESdelete[@et.ID]" class="btn btn-sm btn-danger" disabled="@blockEdit">
                                            <i class="ace-icon fa fa-remove bigger-120"></i>
                                        </button>
                                    </td>
                                </tr>
                                    }
                                }

                                <tr name="Sign-tr[]" id="CloneTR">
                                    <td>
                                        <input name="EStitle[]" type=text name='EStitle'>
                                    </td>
                                    <td>
                                        <select name="EStypeId[]">
                                            @foreach (var item in ViewBag.colTypeList)
                                            {
                                            <option value="@(item.ID)">@item.TypeName</option>
                                            }
                                        </select>
                                        <div name="ESTag[]" class="col-sm-9">
                                            <div class="inline">
                                                <input hidden name="ESTagOpts[]" />
                                                <input type="text" name="TagField[]" id="TagField[]" data-role="tagsinput" value="" placeholder="Enter tags ..." />
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <input type=text name='ESminLen[]' class="col-xs-5" value="1">
                                    </td>
                                    <td>
                                        <input type=text name='ESmaxLen[]' class="col-xs-5" value="300">
                                    </td>
                                    <td>
                                        <input type=checkbox name='ESisrequired[]' disabled="@blockEdit">
                                    </td>
                                    <td id="EScolType[]">
                                        <a name="ESuseTypeV[]" class="btn btn-sm btn-purple">
                                            <i class="fa fa-arrows-h bigger-120"></i>
                                            <input hidden="true" id="ESuseType[]" value="0" />
                                        </a>
                                    </td>
                                    <td>
                                        <div class="row container">
                                            <div class="col-xs-4">
                                                <button id="ESnew[]" name="ESnew[]" class="btn btn-sm btn-success center-block" disabled="@blockEdit">
                                                    <i class="ace-icon fa fa-plus-square bigger-120"></i>
                                                </button>
                                            </div>
                                            <div class="col-xs-4">
                                                <button id="ESupdate[]" name="ESupdate[]" class="btn btn-sm btn-info center-block" style="display: none" disabled="@blockEdit">
                                                    <i class="ace-icon fa fa-check bigger-120"></i>
                                                </button>
                                            </div>
                                            <div class="col-xs-4">
                                                <button id="ESdelete[]" name="ESdelete[]" class="btn btn-sm btn-danger center-block" style="display: none" disabled="@blockEdit">
                                                    <i class="ace-icon fa fa-remove bigger-120"></i>
                                                </button>
                                            </div>
                                        </div>

                                    </td>
                                </tr>
                            </tbody>

                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts{
    <script src="/assets/js/bootstrap-multiselect.min.js"></script>
    <script src="~/Scripts/jquery-ui-1.11.4.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="~/Scripts/ueditor/ueditor.config.js"></script>
    <script type="text/javascript" charset="utf-8" src="~/Scripts/ueditor/editor_api.js"> </script>
    <script type="text/javascript" src="~/Scripts/ueditor/lang/en/en.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery.qrcode.min.js"></script>
    <script type="text/javascript" src="~/Scripts/imgCrop.js"></script>
    <script type="text/javascript" src="~/Content/bootstrap-tag.min.js"></script>
    <script src="~/Scripts/jquery.datetimepicker.full.min.js"></script>
    <script src="~/Scripts/waitMe.min.js"></script>
    <script type="text/javascript">
        function run_waitMe(el, num, effect) {
            text = 'Please wait...';
            fontSize = '';
            switch (num) {
                case 1:
                    maxSize = '';
                    textPos = 'vertical';
                    break;
                case 2:
                    text = '';
                    maxSize = 30;
                    textPos = 'vertical';
                    break;
                case 3:
                    maxSize = 30;
                    textPos = 'horizontal';
                    fontSize = '18px';
                    break;
            }
            console.log(effect);
            el.waitMe({
                effect: effect,
                text: text,
                bg: 'rgba(255,255,255,0.7)',
                color: '#000',
                maxSize: maxSize,
                source: 'img.svg',
                textPos: textPos,
                fontSize: fontSize,
                onClose: function () { }
            });
        }
        $(window).load(function () {

        });
        jQuery(function ($) {
            //$('.containerBlock').waitMe('hide');
            var eventhref =($('#EventHref').attr('href'));
            if (eventhref != '') {
                eventhref = 'https://' + location.host + eventhref;
                run_waitMe($('.containerBlock'), 1, 'none');
                $('#qrcode').qrcode(eventhref);
                $('.containerBlock').waitMe('hide');
                $('#pageContent').removeClass('hide');
                $('.loading').hide(); // hide message when finished with load
            }
            $(this).on('beforeunload', function (event) {
                alert('refresh');
            });
            $('.menu-Event').addClass('active');
            //Show or hide the sign up column edit
            var currentUrl = "@(Model != null && Model.ID > 0 ? Url.Action("Edit") : Url.Action("Add"))";
            var currentEventId = "@(Model != null && Model.ID > 0 ? Model.ID : 0)";
            if (currentUrl == '/Event/Add') {
                $('#ESdiv').removeClass('show');
                $('#ESdiv').addClass('hidden');
            } else {
                $('#ESdiv').removeClass('hidden');
                $('#ESdiv').addClass('show');
            }

            function CleanRow(row) {
                row.find('input[name^=EStitle]').val('');
                row.find('input[name^=ESminLen]').val('1');
                row.find('input[name^=ESmaxLen]').val('300');
                row.find('input[name^=ESisrequired]').removeAttr('checked');
                row.find('input[id^=ESuseType]').val('0');
                row.find('a[id^=ESuseType]').find('i').removeClass("fa-arrows-v");
                row.find('a[id^=ESuseType]').find('i').removeClass("fa-arrows-h");
                row.find('select[name^=EStypeId]').find(":selected").removeAttr('selected');
                row.find('div[name^=ESTag]').find('span[class^=tag]').remove();
                row.find('div[name^=ESTag]').css('display', 'none');
            }

            function AddEsColumn(row, colID) {
                var $clonetr = $(row).clone(true);
                $clonetr.attr('name', "Sign-tr[" + colID + "]");
                $clonetr.find('input[name^=EStitle]').attr('name', "EStitle[" + colID + "]");

                $clonetr.find('select[name^=EStypeId]').attr('name', "EStypeId[" + colID + "]");
                $clonetr.find('input[name^=ESminLen]').attr('name', "ESminLen[" + colID + "]");
                $clonetr.find('input[name^=ESmaxLen]').attr('name', "ESmaxLen[" + colID + "]");
                $clonetr.find('input[name^=ESisrequired]').attr('name', "ESisrequired[" + colID + "]");
                $clonetr.find('div[name^=ESTag]').attr('name', "ESTag[" + colID + "]");
                $clonetr.find('input[name^=ESTagOpts]').attr('name', "ESTagOpts[" + colID + "]");
                $clonetr.find('input[name^=TagField]').attr('name', "TagField[" + colID + "]");
                $clonetr.find('input[id^=TagField]').attr('id', "TagField[" + colID + "]");
                $clonetr.find('td[id^=EScolType]').attr('id', "EScolType[" + colID + "]");
                $clonetr.find('a[name^=ESuseTypeV]').attr('name', "ESuseTypeV[" + colID + "]");
                $clonetr.find('a[name^=ESuseTypeH]').attr('name', "ESuseTypeH[" + colID + "]");
                $clonetr.find('input[name^=ESuseType]').attr('id', "ESuseType[" + colID + "]");
                $clonetr.find('button[name^=ESnew]').attr('name', "ESnew[" + colID + "]");
                $clonetr.find('button[id^=ESnew]').css('display', 'none');
                $clonetr.find('button[id^=ESnew]').attr('id', "ESnew[" + colID + "]");
                $clonetr.find('button[name^=ESupdate]').attr('name', "ESupdate[" + colID + "]");
                $clonetr.find('button[id^=ESupdate]').css('display', 'block');
                $clonetr.find('button[id^=ESupdate]').attr('id', "ESupdate[" + colID + "]");
                $clonetr.find('button[name^=ESdelete]').attr('name', "ESdelete[" + colID + "]");
                $clonetr.find('button[id^=ESdelete]').css('display', 'block');
                $clonetr.find('button[id^=ESdelete]').attr('id', "ESdelete[" + colID + "]");
                $(row).before($clonetr);
            }

            $("input[name=titlefile]").change(function () {
                fileSelectHandler();
            });

            $('a[name^=ESuseType]').each(function () {
                $(this).on('click',
                    function () {
                        var typeicon = $(this).children();
                        var typeInput = $(this).find('input[id^=ESuseType]');
                        if (typeicon.hasClass("fa-arrows-h")) {
                            typeicon.removeClass("fa-arrows-h");
                            typeicon.addClass("fa-arrows-v");
                            $(typeInput).val('1');
                        } else {
                            typeicon.removeClass("fa-arrows-v");
                            typeicon.addClass("fa-arrows-h");
                            $(typeInput).val('0');
                        }
                    });
            });
            //The function of TAG options
            var tag_input = $(this).find('input[id^=TagField]');
            try {
                tag_input.each(function () {
                    $(this).tag({
                        placeholder: tag_input.attr('placeholder'),
                        //source: ace.vars['US_STATES']
                    });
                    var $tag_obj = $(this).data('tag');
                    var tagInput = $(this).parent().siblings('input[name^=ESTagOpts]');
                    if (tagInput.length > 0) {
                        var tagContents = tagInput.val().split('^');
                        tagContents.pop();
                        $.each(tagContents,
                            function (key, value) {
                                $tag_obj.add(value);
                            });
                    }
                });

                //programmatically add a new
            } catch (e) {
                tag_input.after('<textarea id="' +
                    tag_input.attr('id') +
                    '" name="' +
                    tag_input.attr('name') +
                    '" rows="3">' +
                    tag_input.val() +
                    '</textarea>').remove();
            }

            //Control useType is DropDown List show Tag options
            $("tr[name^=Sign-tr]").each(function () {
                //var typeSel=
                if ($(this).find("select[name^=EStypeId]").find(":selected").text() == "Dropdown List") {
                    $(this).find("div[name^=ESTag]").css('display', 'block');
                } else {
                    $(this).find("div[name^=ESTag]").css('display', 'none');
                }
            }).on('change',
                function () {
                    var selector = $(this).find("select[name^=EStypeId]");
                    var options = $(this).find("select[name^=EStypeId]").find('option');
                    var value = selector.val();
                    options.each(function () {
                        if ($(this).text() == selector.find('option[value="' + value + '"]').text()) {
                            $(this).attr("selected", true);
                        } else {
                            $(this).attr("selected", false);
                        }
                    });
                    //selector.find('option[value="' + value + '"]').attr("selected", true);

                    if (selector.find(":selected").text() == "Dropdown List") {
                        $(this).find("div[name^=ESTag]").css('display', 'block');
                    } else {
                        $(this).find("div[name^=ESTag]").css('display', 'none');
                    }
                });

            var contentEditor = UE.getEditor('container');
            var autoMailEditor = UE.getEditor('autoMailContainer');
            var regMailEditor = UE.getEditor('regMailContainer');
            var agreeEditor = UE.getEditor('agreeContainer');

            $('input.event_date').each(function () {
                $(this).datetimepicker({
                    showHour: true,
                    showMinute: false,
                    timeFormat: 'hh:00',
                    timepicker: true,
                    dateFormat: 'yyyy/mm/dd',
                    minDate: +0,
                    timeText: 'Uhrzeit',
                    hourText: 'Stunde',
                    currentText: 'Heute',
                    closeText: 'Fertig'
                });
            });

            $('.multiselect').multiselect({
                buttonClass: 'btn btn-white',
                templates: {
                    button:
                        '<button type="button" class="multiselect dropdown-toggle col-xs-10 col-sm-5" data-toggle="dropdown"></button>',
                    ul: '<ul class="multiselect-container dropdown-menu"></ul>',
                    filter:
                        '<li class="multiselect-item filter"><div class="input-group"><span class="input-group-addon"><i class="fa fa-search"></i></span><input class="form-control multiselect-search" type="text"></div></li>',
                    filterClearBtn:
                        '<span class="input-group-btn"><button class="btn btn-default btn-white btn-grey multiselect-clear-filter" type="button"><i class="fa fa-times-circle red2"></i></button></span>',
                    li: '<li><a href="javascript:void(0);"><label></label></a></li>',
                    divider: '<li class="multiselect-item divider"></li>',
                    liGroup: '<li class="multiselect-item group"><label class="multiselect-group"></label></li>'
                },
                buttonText: function (options, select) {
                    var numberOfOptions = $(this).children('option').length;

                    if (options.length === 0) {
                        return 'None';
                    } else {
                        var selected = '';
                        options.each(function () {
                            var label = ($(this).attr('label') !== undefined) ? $(this).attr('label') : $(this).html();
                            if (!selected) {
                                selected = label;
                            } else {
                                selected += ',' + label;
                            }
                        });
                        return selected.length > 30 ? selected.substring(0, 30) + '...' : selected;
                    }
                }
            });

            $('.swEnable').each(function () {
                var chk = $(this).siblings(':checkbox');
                $(this).attr('value', chk.val());

                $(this).click(function () {
                    var val = chk.attr('value');
                    if (val == 'true') {
                        chk.val('false');
                        $(this).attr('value', 'false');
                        switch (chk.attr('id')) {
                        case 'IsPwLimited':
                            $('#LimitedPw').val('');
                            $('#LimitedPw').attr('readonly', val);
                            break;
                        case 'IsNumLimited':
                            $('#LimitedNum').val('');
                            $('#LimitedNum').attr('readonly', val);
                            break;
                        case 'IsChangeViewNum':
                            $('#ViewNum').val('');
                            $('#ViewNum').attr('readonly', val);
                            break;
                        default:
                        }
                    } else {
                        chk.val('true');
                        $(this).attr('value', 'true');
                        switch (chk.attr('id')) {
                        case 'IsPwLimited':
                            $('#LimitedPw').removeAttr('readonly');
                            break;
                        case 'IsNumLimited':
                            $('#LimitedNum').removeAttr('readonly');
                            break;
                        case 'IsChangeViewNum':
                            $('#ViewNum').removeAttr('readonly');
                            break;
                        default:
                        }
                    }

                });
            });
            $('#btn_LoadAgree').click(function() {
                var defaultAgree='@Html.Raw(ViewBag.defaultAgreement)';
                agreeEditor.setContent(defaultAgree);
            });
            $('#send').click(function () {

                var Name = $('#Name').val();
                var Title = $('#Name').val();
                var EventStart = $('#EventStart').val();
                var EventEnd = $('#EventEnd').val();
                var SignStart = $('#SignStart').val();
                var SignEnd = $('#SignEnd').val();
                var MasterEmail = $('#MasterEmail').val();
                var LimitedPw = $('#LimitedPw').val();
                var LimitedNum = $('#LimitedNum').val();
                var UserId = $('#UserCharge').find(":selected").attr('value');
                var DepId = $('#DepId').val();
                var Address = $('#Address').val();
                var IsPwLimited = $('#IsPwLimited').attr('value');
                var IsNumLimited = $('#IsNumLimited').attr('value');
                var IsOpen = $('#IsOpen').attr('value');
                var QRCodePassword = $('#QRCodePassword').val();
                var QRcodeMode = $('#QRcodeMode').find(":selected").attr('value');

                //Validate the form  column
                if (!agreeEditor.getContent()) {
                    alert('Agreement Content Required');
                    return false;
                }
                if (!EventStart) {
                    alert('Activity Start Required');
                    return false;
                }
                if (!EventEnd) {
                    alert('Activity End Required');
                    return false;
                }
                if (!SignStart) {
                    alert('Enroll Start Required');
                    return false;
                }
                if (!SignEnd) {
                    alert('Enroll Start Required');
                    return false;
                }
                if (IsPwLimited == "true") {
                    if (!LimitedPw) {
                        alert('Application Password Required');
                        return false;
                    }
                }
                if (IsNumLimited == "true") {
                    if (!LimitedNum) {
                        alert('Max Application Number Required');
                        return false;
                    }
                }

                var formData = new FormData();
                formData.append('Title', Title);
                formData.append('Name', Name);
                formData.append('EventStart', EventStart);
                formData.append('EventEnd', EventEnd);
                formData.append('SignStart', SignStart);
                formData.append('SignEnd', SignEnd);
                formData.append('MasterEmail', MasterEmail);
                formData.append('Address', Address);
                formData.append('LimitedPw', LimitedPw);
                formData.append('LimitedNum', LimitedNum);
                formData.append('UserId', UserId);
                formData.append('IsPwLimited', IsPwLimited);
                formData.append('IsNumLimited', IsNumLimited);
                formData.append('IsOpen', IsOpen);
                formData.append('QRcodeMode', QRcodeMode);
                formData.append('QRCodePassword', QRCodePassword);
                formData.append('ID', '@(Model != null && Model.ID > 0 ? Model.ID : 0)');
                formData.append('DepId', DepId);
                formData.append('Content', contentEditor.getContent());
                formData.append('EmailContent', autoMailEditor.getContent());
                formData.append('CfmEmailContent', regMailEditor.getContent());
                formData.append('Agreement', agreeEditor.getContent());

                var saveBtn = $(this).attr('disabled', true);
                run_waitMe($('.containerBlock'), 1, 'none');
                var addUrl = "@(Model != null && Model.ID > 0 ? Url.Action("Edit") : Url.Action("Add"))";
                $.ajax
                ({
                    type: "POST",
                    url: addUrl,
                    data: formData,
                    processData: false,
                    contentType: false,
                    timeout: 10000,
                    error: function () {
                        alert('System is busy, please try again later');
                        $('#ESdiv').removeClass('hidden');
                        $('#ESdiv').addClass('show');
                    },
                    success: function (data) {
                        saveBtn.attr('disabled', false);
                        $('.containerBlock').waitMe('hide');

                        if (!data.Success) {
                            alert(data.Message);
                        } else {
                            $('#ESdiv').removeClass('hidden');
                            $('#ESdiv').addClass('show');
                            //alert('存檔完成');
                            if (addUrl == '/Event/Add') {
                                var toUrl = '/Event/Edit?sourceid=' + data.Data.ID;
                                location.href = toUrl;
                            }
                        }
                    }
                });
                return false;
            });
            var emailColCount = $('#Sign-table > tbody >tr >td > select[name^=EStypeId] option:selected[value=2]').length;
            $('button[id^=ESnew]').each(function () {
                $(this).click(function () {
                    if (!currentEventId || currentEventId <= 0) {
                        return false;
                    }
                    var addRow = $(this).parents('tr[name^=Sign-tr]');
                    var formData = new FormData();
                    var Title = addRow.find('input[name^=EStitle]').val();
                    var MinLen = addRow.find('input[name^=ESminLen]').val();
                    var MaxLen = addRow.find('input[name^=ESmaxLen]').val();
                    var IsRequired = addRow.find('input[name^=ESisrequired]').is(':checked');
                    var UseType = $(addRow).find('input[id^=ESuseType]').val();
                    var TypeId = addRow.find('select[name^=EStypeId]').find(":selected").val();
                    emailColCount = $('#Sign-table > tbody >tr >td > select[name^=EStypeId] option:selected[value=2]').length;
                    if (emailColCount > 1) {
                        alert('Save Error !!! Only one column can be the type of Email');
                        addRow.find('select[name^=EStypeId]').focus();
                        return false;
                    } else if (TypeId == '2') {
                        emailColCount++;
                    } else {

                    }
                    var TagOpts = addRow.find('input[name^=TagField]').val();
                    //Varify the formData
                    if (!Title) {
                        addRow.find('input[name^=EStitle]').focus();
                        alert('Column Reqired');
                        return false;
                    }
                    if (MinLen >= MaxLen) {
                        addRow.find('input[name^=ESmaxLen]').focus();
                        alert("Min length can't be higher that Max length");
                        return false;
                    }
                    if (TypeId == 4) {
                        if (TagOpts.length == 0) {
                            alert('Drop down option required');
                            return false;
                        }
                    }
                    formData.append('EventId', currentEventId);
                    formData.append('Title', Title);
                    formData.append('MinLen', MinLen);
                    formData.append('MaxLen', MaxLen);
                    formData.append('IsRequired', IsRequired);
                    formData.append('UseType', UseType);
                    formData.append('TypeId', TypeId);
                    formData.append('TagOpts', TagOpts);

                    $.ajax
                    ({
                        type: "POST",
                        url: '/Event/AddEventSign',
                        contentType: 'application/json; charset=utf-8',
                        dataType: "json",
                        data: formData,
                        processData: false,
                        contentType: false,
                        timeout: 10000,
                        error: function (xhr, ajaxOptions, thrownError) {
                            console.log(xhr.responseText);
                            alert('System is busy, please try again later');
                            history.go(0);
                        },
                        success: function (data) {
                            AddEsColumn(addRow, data.ID);
                            CleanRow(addRow);
                        }
                    });
                    return false;
                });
            });

            $('button[id^=ESupdate]').each(function () {
                $(this).click(function () {
                    if (!currentEventId || currentEventId <= 0) {
                        return false;
                    }
                    var ESid = $(this).attr('id').match(/[0-9]+/g);
                    var updateRow = $(this).parents('tr[name^=Sign-tr]');
                    var formData = new FormData();
                    var Title = updateRow.find('input[name^=EStitle]').val();
                    var MinLen = updateRow.find('input[name^=ESminLen]').val();
                    var MaxLen = updateRow.find('input[name^=ESmaxLen]').val();
                    var IsRequired = updateRow.find('input[name^=ESisrequired]').is(':checked');
                    var UseType = $(updateRow).find('input[id^=ESuseType]').val();
                    var TypeId = updateRow.find('select[name^=EStypeId]').find(":selected").val();
                    emailColCount = $('#Sign-table > tbody >tr >td > select[name^=EStypeId] option:selected[value=2]').length;
                    if (emailColCount > 1) {
                        alert('Save Error !!! Only one column can be the type of Email');
                        updateRow.find('select[name^=EStypeId]').focus();
                        return false;
                    } else if (TypeId == '2') {
                        emailColCount++;
                    } else {

                    }
                    var TagOpts = updateRow.find('input[name^=TagField]').val();
                    //Varify the formData
                    if (!Title) {
                        updateRow.find('input[name^=EStitle]').focus();
                        alert('Column Name Reqired');
                        return false;
                    }
                    if (MinLen >= MaxLen) {
                        updateRow.find('input[name^=ESmaxLen]').focus();
                        alert("Min length can't be higher that Max length");
                        return false;
                    }
                    if (TypeId == 4) {
                        if (TagOpts.length == 0) {
                            alert('Drop down option required');
                            return false;
                        }
                    }

                    formData.append('EventId', currentEventId);
                    formData.append('ID', ESid);
                    formData.append('Title', Title);
                    formData.append('MinLen', MinLen);
                    formData.append('MaxLen', MaxLen);
                    formData.append('IsRequired', IsRequired);
                    formData.append('UseType', UseType);
                    formData.append('TypeId', TypeId);
                    formData.append('TagOpts', TagOpts);

                    $.ajax
                    ({
                        type: "POST",
                        url: '/Event/UpdateEventSign',
                        contentType: 'application/json; charset=utf-8',
                        dataType: "json",
                        data: formData,
                        processData: false,
                        contentType: false,
                        timeout: 10000,
                        error: function () {
                            alert('System is busy, please try again later');
                            history.go(0);
                        },
                        success: function (data) {
                        }
                    });
                    return false;
                });
            });

            $('button[id^=ESdelete]').each(function () {
                $(this).click(function () {
                    if (!currentEventId || currentEventId <= 0) {
                        return false;
                    }
                    var delBtn = $(this);
                    var delRow = $(this).parents('tr[name^=Sign-tr]');
                    emailColCount = $('#Sign-table > tbody >tr >td > select[name^=EStypeId] option:selected[value=2]').length;
                    var ESid = delBtn.attr('id').match(/[0-9]+/g);
                    var formData = new FormData();
                    formData.append('ID', ESid);
                    $.ajax
                    ({
                        type: "POST",
                        url: '/Event/DeleteEventSign',
                        data: formData,
                        processData: false,
                        contentType: false,
                        timeout: 10000,
                        error: function () {
                            alert('System is busy, please try again later');
                            history.go(0);
                        },
                        success: function (data) {
                            delRow.remove();
                        }
                    });
                });
            });
        });
    </script>
}